#!/usr/bin/env ruby

require 'yaml'
require 'digest'
require 'digest/bubblebabble'
require 'scrypt'
require 'highline'

class Digestor
  # Generates a password from a
  # given master password and key
  # This is a stub interface

  def initialize(username,password)
    # You should probably generate
    # some intermediate data with these
  end

  def make_password_int(key)
    # Return a giant integer deterministically
    # built from the username/password/key combo.
  end
end

class SHA512Digestor
  # Old digestor from before I knew what I was doing
  # Do not use. Only kept so I can migrate everything.

  def initialize(username,password)
    @password_hash = Digest::SHA512.hexdigest(password).to_i(16)
  end

  def make_password_int(key)
    Digest::SHA512.hexdigest(key).to_i(16) ^ @password_hash
  end
end

class SCryptDigestor
  # New scrypt-based digestor. Uses high work factors,
  # computes in the background to improve responsiveness,
  # Uses SHA512(username) as a salt.

  def initialize(username,password)
    @work_thread = Thread.new do
      @hashed = SCrypt::Engine.scrypt(password,[Digest::SHA512.hexdigest(username)].pack('H*'),2**22,16,1,64)
    end
  end

  def make_password_int(key)
    @work_thread.join # Make sure password computation finished.
    SCrypt::Engine.scrypt(@hashed,[Digest::SHA512.hexdigest(key)].pack('H*'),2**16,12,1,64).unpack('H*')[0].to_i(16)
  end
end

class PasswordRepo

    class PasswordGenerator
        
        ATTRIBUTES = [:character_set, :length, :suffix]

        attr_reader(*ATTRIBUTES)
        
        CHARACTER_SET = (0x21..0x7E).collect(&:chr)

        def self.valid_regex(rgx)
            return CHARACTER_SET.any?{|s| rgx.match(s)}
        end

        def initialize(hsh)
            if @character_set = hsh[:character_set]
            elsif ch_rgx = hsh[:character_regex]
                raise ArgumentError.new("Your regex matches no characters") unless PasswordGenerator.valid_regex(ch_rgx)
                @character_set = CHARACTER_SET.select{|a| ch_rgx.match(a)}.sort.join
            else
                raise ArgumentError.new("Need :character_set or :character_regex")
            end
            (@length = hsh[:length]) || (raise ArgumentError.new("Need :length"))
            @suffix = hsh[:suffix] || ''
        end

        def generate(hashed)
            base = @character_set.size
            pass = []
            @suffix ||= ''
            until((pass.size + @suffix.size) == @length)
                hashed, m = hashed.divmod(base)
                pass << @character_set[m]
            end
            pass.join + @suffix
        end
    end

    DEFAULT_OPTIONS = {
        :passwords_file => "#{ENV['HOME']}/.saved_passwords.yaml",
        :digestor => SCryptDigestor,
    }

    attr_reader :key_list

    class MissingKeyError < ArgumentError
        def initialize(key)
            super("Key #{key} does not exist in the set. Create it first.")
        end
    end

    class InvalidPasswordError < ArgumentError
        def initialize
            super("The provided password could not be used to read the file.")
        end
    end

    def initialize(username, password, options={})
        options = DEFAULT_OPTIONS.merge(options)
        @key_list = {}
        @password_file = options[:passwords_file]
        if File.exists?(@password_file)
            @key_list.merge!(YAML.load(File.open(@password_file, 'rb'){|f| f.read}))
        end
        @digestor = options[:digestor].new(username, password)
        write
    end

    def write
        File.open(@password_file, 'wb') do |file|
            file.write(@key_list.to_yaml)
        end
    end

    def add_entry(key, generator)
        @key_list[key] = generator
        write
        password(key)
    end

    def remove_entry(key)
        @key_list.delete(key)
        write
    end

    def password(key)
        (generator = @key_list[key]) || (raise MissingKeyError(key))
        hashed = @digestor.make_password_int(key)
        generator.generate(hashed)
    end
end

class UserPrompt < HighLine
    def initialize(options={})
      @options = options
      super()
      self.wrap_at = output_cols - 5
    end

    def main_menu
        continue = true
        begin
            system("reset")
            @password_repo || (load_password_file; redo)
            choose do |menu|
                menu.header = "Pick an action"
                menu.flow = :rows
                menu.choice("List Passwords"){puts(list(@password_repo.key_list.keys, :columns_down))}
                menu.choice("Add Password"){add_password}
                menu.choice("Show Password"){show_password}
                menu.choice("Remove Password"){remove_password}
                menu.choice("Quit"){continue = false}
                menu.readline = true
            end
            ask("Press Enter to continue") if continue
        rescue Interrupt
            say("Quitting")
            continue = false
        end while continue
    end

    def verify_password_fingerprint(password)
      puts Digest::SHA256.bubblebabble(password).split('-')[0,3].join('-')
      agree("Looks good? ")
    end
    
    def load_password_file
        begin
            username = ask("Username?")
            begin
              password = ask("Password?"){|q| q.echo = false}
            end until verify_password_fingerprint(password)
            @password_repo = PasswordRepo.new(username,password,@options)
        rescue PasswordRepo::InvalidPasswordError => e
            say("The password is invalid.")
            retry
        end
    end

    def add_password
        key = ask("Key for password: "){|q| q.validate = /\w+/}
        if @password_repo.key_list[key]
            agree("This will override an existing password, are you sure? ") or return
        end
        length = ask("Length of password (including suffix): ", Integer){|q| q.above=0}
        regex = ask("Allowed Characters (Regex): ", Regexp) do |q|
            q.default = '.'
            q.validate = lambda {|s| PasswordRepo::PasswordGenerator.valid_regex(Regexp.new(s))}
            q.responses[:not_valid] = "Your regex must match at least 1 character in ASCII Printable range."
        end
        suffix = ask("Suffix: ") do |q|
            q.default = nil
            q.validate = lambda{|s| s.length < length}
            q.responses[:not_valid] = "Your suffix must be shorter than #{length}."
        end
        return unless agree(<<-PROMPT)
Use these settings?
Key:              #{key}
Length:           #{length}
Character_regex:  #{regex}
Suffix:           #{suffix}
        PROMPT
        created_password = @password_repo.add_entry(key, PasswordRepo::PasswordGenerator.new(:length => length, :character_regex => regex, :suffix => suffix))
        say("Done, your new password is\n#{created_password}")
    end

    def show_password
        choose do |menu|
            menu.header = "Passwords:"
            menu.header = "Which?"
            menu.flow = :columns_down
            menu.choice('cancel'){}
            menu.choices(*@password_repo.key_list.keys) do |key|
                password = @password_repo.password(key)
                parameters = @password_repo.key_list[key]
                say("Password:\n#{password}")
                say("Generated with:\n\tLength: #{parameters.length}\n\tSuffix: #{parameters.suffix}\n\tCharacter Set: #{parameters.character_set}")
            end
            menu.readline = true
        end
    end

    def remove_password
        choose do |menu|
            menu.header = "Passwords:"
            menu.header = "Which?"
            menu.flow = :columns_down
            menu.choices(*@password_repo.key_list.keys) do |key|
                @password_repo.remove_entry(key)
                say("Deleted")
            end
            menu.readline = true
        end
    end
end

if __FILE__ == $PROGRAM_NAME
  require 'optparse'

  options = {}
  digestors = {
    sha512_BAD: SHA512Digestor,
    scrypt: SCryptDigestor,
  }

  parser = OptionParser.new do |opts|
    opts.banner = 'Usage: password_manager [options]'

    opts.on('-d', '--digestor', '=NAME', "Use a specific digestor for password generation", digestors){|digestor| options[:digestor] = digestor}
    opts.on('-f', '--password-file', '=FILE', "Use the password file stored at FILE"){|file| options[:passwords_file] = file}
    opts.on_tail("-h", "--help", "Show this message") do
      puts opts
      exit
    end
  end

  begin
    parser.parse!
  rescue
    abort(parser.help)
  else
    UserPrompt.new(options).main_menu
  end
end
